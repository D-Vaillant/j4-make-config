#!/usr/bin/python

# i3 config generator/switcher
# by Oliver Kraitschy
# http://okraits.de okraits@arcor.de

from os import path, getenv, listdir, system
from pathlib import Path
from sys import argv
import argparse
from subprocess import Popen, PIPE

# global variables

# paths
SYSTEM_THEME_PATH = Path("/usr/share/j4-make-config-git/themes")
THEME_PATH = ""
i3_PATH = ""
i3_BASECONFIG_PATH = ""
i3_CONFIG_PATH = ""
# cli arguments
theme_name = None
appendFiles_list = []
noTheme = False
doReload = False
# variables for config processing
themes_list = {}
baselines_list = []
windowActive = False
barActive = False
windowText = ""
barText = ""
commandString = ""

def detectConfigDir():
    for i3_config_path in (Path(getenv("HOME", '')).joinpath('.i3/config'),
                           Path(getenv("HOME", '')).joinpath('.config/i3/config'),
                           Path(getenv("XDG_CONFIG_HOME", '')).joinpath('i3/config')):
        if i3_config_path.joinpath('config.base').exists():
            return i3_config_path
    else:
        return None

def printUsageInfo():
    info = """i3 config generator/switcher\n
Usage examples:
===============
Create config file and include a specific theme:
\tj4-make-config <theme-name>
Create config file without including a theme:
\tj4-make-config none
Include a specific/no theme and reload i3 after creating the config file:
\tj4-make-config -r <theme-name>|none
Append additional configuration from files in the i3 config directory:
\tj4-make-config -a <file-name> -a <another-file-name> <theme-name>|none
Append additional configuration and reload i3 after creating the config file:
\tj4-make-config -r -a <file-name> <theme-name>|none
Run j4-make-config with the most recently used arguments:
\tj4-make-config"""
    print(info)

def printThemeList():
    print("\nAvailable themes:")
    print("=================")
    print("\n".join(sorted(themes_list.keys())))

""" Instead of executing, I just do a split and load the values into the argparser. """
def get_j4_cache():
    if path.exists(getenv("HOME") + "/.j4-make-config.rc"):
        try:
            rcfile = open(getenv("HOME") + "/.j4-make-config.rc", "r")
        except IOError:
            print("Error: file %s could not be opened." % (getenv("HOME") + "/.j4-make-config.rc"))
            exit(1)
        commandString = rcfile.read()
        rcfile.close()
        print("Executing: " + commandString)
        return commandString.split()[1:]
    else:
        print("Error: file %s does not exist yet." % (getenv("HOME") + "/.j4-make-config.rc"))
        exit(1)

def set_j4_cache(theme_name, interactive=False):
    if interactive:
        commandString = argv[0] + ' -r ' + theme_name
    else:
        commandString = ' '.join(argv)
    try:
        rcfile = open(getenv("HOME") + "/.j4-make-config.rc", "w")
    except IOError:
        print("Error: file %s could not be opened." % (getenv("HOME") + "/.j4-make-config.rc"))
        exit(1)
    rcfile.write(commandString)
    rcfile.flush()
    rcfile.close()

if __name__ == "__main__":
    ## Configuring the work environment.
    # detect i3 configuration directory
    i3_PATH = detectConfigDir()
    if i3_PATH is None:
        print("Error: i3 base config file could not be found.")
        exit(1)
    else:
        # set paths
        THEME_PATH = i3_PATH / "themes"
        i3_BASECONFIG_PATH = i3_PATH / "config.base"
        i3_CONFIG_PATH = i3_PATH / "config"
        # fill themes dictionary with names and paths
        if SYSTEM_THEME_PATH.exists():
            for theme in SYSTEM_THEME_PATH.iterdir():
                themes_list[str(theme)] = SYSTEM_THEME_PATH / theme
        if THEME_PATH.exists():
            for theme in THEME_PATH.iterdir():
                themes_list[str(theme)] = THEME_PATH / theme
        if not themes_list:
            print("Error: No themes found.")
            exit(1)
    
    parser = argparse.ArgumentParser(description='i3 config generator/switcher')
    # This lambda is a horrible, horrible hack that relies on the fact that the prints return "None."
    parser.add_argument(
            '-h', '--help',
            action=(lambda *_,**__: printUsageInfo() or printThemeList() or exit(0)))
    parser.add_argument(
            '-i', '--interactive', action='store_true',
            help="Uses rofi to select a theme.")
    parser.add_argument('-r', '--refresh', action='store_true',
            help='Reload i3 after creating the config file.')
    parser.add_argument('-a', '--append', action='append', metavar='<file-name>',
            help="Append additional configuration files located "
                 "in the i3 config directory.")
    parser.add_argument('theme', action='store', nargs='?',
            metavar='<theme-name>|none', default=None,
            help="Create a config file using a specific theme or no theme.")

    ## Parsing the arguments.
    args = parser.parse_args() 
    if args.interactive:
        ps = Popen("echo '%s' | rofi -width 30 -dmenu -p 'Set i3 theme:'" % \
                ("\n".join(sorted(themes_list.keys()))),
                stdout=PIPE, stderr=PIPE, shell=True, universal_newlines=True)
        for line in ps.stdout:
            args.theme = line[:-1]
            args.refresh = True
            set_j4_cache(args.theme, interactive=True)
        if args.theme is None:
            exit(0)
    elif args.theme is None:
        if args.append or args.refresh:
            pass
        else:
            print("Error: theme argument is missing.")
            exit(1)
    else:
        # no arguments given, use commandstring from rc file
        args = parser.parse_args(get_j4_cache())
    
    # we must not include a theme in the config file
    if args.theme is None:
        print("Error: theme argument is missing.")
        exit(1)
    
    if args.theme != 'none':
        # try to open given filename
        try:
            themefile = open(themes_list[args.theme], "r")
        except (KeyError, IOError):
            print("Error: theme %s does not exist." % args.theme)
            printThemeList()
            exit(1)
        
        # read themefile, create section strings
        for line in themefile:
            if "$i3-theme-window" in line:
                windowActive = True
                barActive = False
            elif "$i3-theme-bar" in line:
                windowActive = False
                barActive = True
            else:
                if windowActive and not barActive:
                    windowText += line
                elif not windowActive and barActive:
                    barText += line
        themefile.close()
    
    # try to open i3 base config file
    try:
        basefile = i3_BASECONFIG_PATH.open('r')
    except IOError:
        print("Error: i3 base config file could not be opened.")
        exit(1)
    # read all lines of base config into list
    baselines_list.extend(basefile.readlines())
    basefile.close()
    
    # append all additional configuration files
    for appendFilename in args.append:
        try:
            appendFile = (i3_PATH / appendFilename).open('r')
        except IOError:
            print("Error: file %s could not be opened." % appendFilename)
            exit(1)
        # read all lines of appendFile into list
        baselines_list.extend(appendFile.readlines())
        appendFile.close()
    
    # try to open i3 config file
    try:
        configfile = open(i3_CONFIG_PATH, "w")
    except IOError:
        print("Error: i3 config file could not be created.")
        exit(1)
    
    # iterate over base config lines, write all to config file
    # and insert theme config at the right place
    for line in baselines_list:
        if line.lstrip().startswith("# $i3-theme-window"):
            if not noTheme:
                configfile.write(windowText)
        elif line.lstrip().startswith("# $i3-theme-bar"):
            if not noTheme:
                configfile.write(barText)
        else:
            configfile.write(line)
    configfile.flush()
    configfile.close()

    if args.refresh:
        system("i3-msg reload")
    
    # store commandstring in rc file
    set_j4_cache(args.theme, interactive=False)
    exit(0)
